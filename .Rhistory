?read.csv
date1 <- read.csv(file.choose(), header = TRUE)
View(date1)
data1
date1
clear
data1 = date1
rm(date1)
view(data1)
View(data1)
data2 <- read.table(file.choose)
data2 <- read.table(file.choose(), header = T, sep = ",")
View(data2)
library(readxl)
LungCapData2 <- read_excel("X:/R_learning/Notes/6. Importing-Reading Excel data into R using RStudio (readxl)/LungCapData2.xlsx",
n_max = 3)
View(LungCapData2)
View(LungCapData1)
source("X:/R_learning/Notes/6. Importing-Reading Excel data into R using RStudio (readxl)/Script.R")
rep("khaled", 9)
seq()
se(from=1, to=20, by = 3)
seq(from=1, to=20, by = 3)
read.csv(file.choose(), header= )
read.csv(file.choose(), header= T)
table1 <- read.csv(file.choose(), header= T)
table1 <- read.table(file.choose(), header= T, sep=",")
table2 <- read.table(file.choose(), header= T, sep=",")
table1
table2
install
install.packages("epiR")
library(epiR)
install.packages()
detwd()
getwd()
setwd()
setwd(choose.dir())
read.csv("Notes/StockExample.csv", header = T,)
stockData = read.csv("Notes/StockExample.csv", header = T,)
Avg = apply(x= stockData, MARGIN = 2, fun= mean() )
Avg = apply(x= stockData, MARGIN = 2, fun= mean )
?apply
Avg = apply(x= stockData, MARGIN = 2, mean )
Avg = apply(x= stockData, 2, mean )
Avg = apply(x= stockData, 2, mean )
Avg = apply(stockData, 2, mean )
Avg
stockData
Avg = apply(X= stockData,MARGIN =  2,FUN =  mean )
Avg = apply(X= stockData,MARGIN =  2,FUN =  mean )
apply(X= stockData,MARGIN =  2,FUN =  mean )
apply(X= stockData,MARGIN =  2,FUN =  mean )
View(stockData)
apply(X= stockData,MARGIN =  2,FUN =  mean )
summary(stockData)
View(stockData)
stockData = read.csv("Notes/StockExample.csv", header = T, row.names = T)
stockData = read.csv("Notes/StockExample.csv", header = T, row.names = 1)
apply(X= stockData,MARGIN =  2,FUN =  mean )
apply(X= stockData,MARGIN =  2,FUN =  mean , na.rm=T)
apply(X= stockData,MARGIN =  2,FUN =  mean , na.rm=1)
apply(X= stockData,MARGIN =  2,FUN =  mean , na.rm=T)
aplly(stockData, 2, quantile(), probs= c(.2,.8))
apply(stockData, 2, quantile(), probs= c(.2,.8))
apply(stockData, 2, quantile(), c(.2,.8))
apply(X= stockData,MARGIN =  2,FUN = quantile(), c(.2,.8), na.rm=T)
apply(X= stockData,MARGIN =  2,FUN =  mean , na.rm=T)
apply(X= stockData,MARGIN =  2,FUN = quantile(), c(.2,.8), na.rm=T)
apply(X= stockData,MARGIN =  2,FUN = quantile(), c(.2,.8), na.rm=T)
apply(X= stockData,MARGIN =  2,FUN = quantile(), c(.2,.8), na.rm=T)
apply(X= stockData,MARGIN =  2,FUN = quantile(), c(.2,.8), na.rm=T)
apply(X= stockData,MARGIN =  2,FUN = quantile, c(.2,.8), na.rm=T)
apply(X= stockData,MARGIN =  2,FUN = max, na.rm=T)
View(stockData)
apply(X= stockData,MARGIN =  2,FUN = min, na.rm=T)
apply(X= stockData,MARGIN =  2,FUN = plot, type= "l")
open()
open(choose.files())
LungCapData = stockData
rm(LungCapDatan)
rm(list(LungCapDatan))
rm(list("LungCapDatan"))
rm("LungCapDatan")
?rm
rm(LungCapData)
rm(list = ls())
clear
LungCapData = read.csv(choose.files(), header = T)
LungCapData = read.csv(choose.files(), header = T)
# and attach it
attach(LungCapData)
# get the help menu
?tapply
tapply(LungCap,Smoke,mean, na.rm=t)
# calculate the mean Age for Smoker/NonSmoker
tapply(X=Age, INDEX=Smoke, FUN=mean, na.rm=T)
# calculate the mean Age for Smoker/NonSmoker
tapply(X=Age, INDEX=Smoke, FUN=mean, na.rm=T)
tapply(Age,Smoke,mean, na.rm=t)
# we can save the output in a new "object"
m <- tapply(Age, Smoke, mean)
m
# also worth discussing is the use of the "SIMPLIFY" argument
# this is set to TRUE by default...if we set it to "FALSE"...
tapply(Age, Smoke, mean, simplify=FALSE)
mean(age[Smoke="no"])
mean(Age[Smoke="no"])
mean(Age[Smoke="no"], na.rm = T)
mean(Age[Smoke=="no"], na.rm = T)
mean(Age[Smoke=="no"],)
# note that we could get the same using [ ],
# although using "tapply" is more efficient
mean(Age[Smoke=="no"])
mean(Age[Smoke=="yes"])
# let's look at applying the "summary" function to groups
tapply(Age, Smoke, summary)
# or, applying the "quantile" function to the groups
tapply(Age, Smoke, quantile, probs=c(0.2, 0.8))
tapply(Age,list(Smoke, Gender), mean)
tapply(Age,list(Smoke), mean)
tapply(Age,list(Gender), mean)
# an a note that the "by" function is the same as tapply,
# except it presents the results similar to a vector
by(Age, list(Smoke, Gender), mean, na.rm=T)
# and we can subset the elements in the usual way
temp <- by(Age, list(Smoke, Gender), mean, na.rm=T)
temp
temp[4]
# and see the "class" of temp
class(temp)
# we can also convert it to a vector if we prefer
c(temp)
temp2 <- c(temp)
temp2
# and check it's class
class(temp2)
